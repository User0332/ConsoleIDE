global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



global

using

ScreenReference

=

nint
nint
;

global

using

Mindmagma

.

Curses

;

using

ConsoleIDE
ConsoleIDE
.
ConsoleIDE.Delegators
Delegators
ConsoleIDE.Delegators
;

namespace

ConsoleIDE
ConsoleIDE
;

class

IDEMain

{

static

int
int
Main

(

string
string
[



]

args

)

{

ScreenReference
nint
screen

=

NCurses

.

InitScreen

(

)

;

GlobalScreen
ConsoleIDE.GlobalScreen
.
ConsoleIDE.GlobalScreen.Screen
Screen
ConsoleIDE.GlobalScreen.Screen
=

screen
screen
;

NCurses

.

StartColor

(

)

;

NCurses

.

SetCursor

(

0

)

;

NCurses

.

NoDelay

(

screen
screen
,

true

)

;

NCurses

.

NoEcho

(

)

;

NCurses

.

Raw

(

)

;

NCurses

.

InitColor

(

10

,

500

,

500

,

500

)

;

NCurses

.

InitPair

(

1

,

10

,

CursesColor

.

BLACK

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Init(nint)
Init
ConsoleIDE.ClickDelegator.Init(nint)
(

screen
screen
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
Init
ConsoleIDE.Delegators.ViewDelegator.Init(nint)
(

screen
screen
)

;

MouseEvent

mouseEvent

=

new

(

)

{

bstate

=

CursesMouseEvent

.

REPORT_MOUSE_POSITION

,

x

=

0

,

y

=

0

}

;

while

(

true

)

{

switch

(

NCurses

.

GetChar

(

)

)

{

case

-
int.operator -(int)
1

:

break

;

case

CursesKey

.

MOUSE

:

try

{

NCurses

.

GetMouse

(

out

MouseEvent

mouseEv

)

;

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEv
mouseEv
)

;

if

(

mouseEv
mouseEv
.

bstate

==

CursesMouseEvent

.

REPORT_MOUSE_POSITION

)

{

mouseEvent
mouseEvent
=

mouseEv
mouseEv
;

}

}

catch

(

DotnetCursesException

)

{

}

break

;

case

int
int
ch

:

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
ProcessInput
ConsoleIDE.Delegators.ViewDelegator.ProcessInput(int)
(

ch
ch
)

;

break

;

}

ClickDelegator
ConsoleIDE.ClickDelegator
.
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
Delegate
ConsoleIDE.ClickDelegator.Delegate(MouseEvent)
(

mouseEvent
mouseEvent
)

;

ViewDelegator
ConsoleIDE.Delegators.ViewDelegator
.
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
Render
ConsoleIDE.Delegators.ViewDelegator.Render(nint)
(

screen
screen
)

;

NCurses

.

Refresh

(

)

;

}

}

}



